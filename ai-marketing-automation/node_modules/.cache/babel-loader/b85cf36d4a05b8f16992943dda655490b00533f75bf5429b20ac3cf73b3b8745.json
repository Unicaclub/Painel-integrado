{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Ia marketing\\\\Painel-integrado\\\\ai-marketing-automation\\\\src\\\\components\\\\NotificationSystem.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport './NotificationSystem.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const useNotification = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification deve ser usado dentro de NotificationProvider');\n  }\n  return context;\n};\n_s(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const removeNotification = useCallback(id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  }, []);\n  const showNotification = useCallback(notification => {\n    const id = Date.now().toString();\n    const newNotification = {\n      ...notification,\n      id,\n      duration: notification.duration || 5000\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto remove notification\n    setTimeout(() => {\n      removeNotification(id);\n    }, newNotification.duration);\n  }, [removeNotification]);\n  const showSuccess = useCallback((title, message) => {\n    showNotification({\n      type: 'success',\n      title,\n      message\n    });\n  }, [showNotification]);\n  const showError = useCallback((title, message) => {\n    showNotification({\n      type: 'error',\n      title,\n      message,\n      duration: 7000\n    });\n  }, [showNotification]);\n  const showWarning = useCallback((title, message) => {\n    showNotification({\n      type: 'warning',\n      title,\n      message\n    });\n  }, [showNotification]);\n  const showInfo = useCallback((title, message) => {\n    showNotification({\n      type: 'info',\n      title,\n      message\n    });\n  }, [showNotification]);\n  const getIcon = type => {\n    switch (type) {\n      case 'success':\n        return '✅';\n      case 'error':\n        return '❌';\n      case 'warning':\n        return '⚠️';\n      case 'info':\n        return 'ℹ️';\n      default:\n        return 'ℹ️';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      showNotification,\n      showSuccess,\n      showError,\n      showWarning,\n      showInfo\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-container\",\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification notification-${notification.type}`,\n        onClick: () => removeNotification(notification.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-icon\",\n          children: getIcon(notification.type)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"notification-title\",\n            children: notification.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"notification-message\",\n            children: notification.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"notification-close\",\n          onClick: e => {\n            e.stopPropagation();\n            removeNotification(notification.id);\n          },\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, notification.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"a3PKfJgo7/9OlBw9nVM+DLZEJeM=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","jsxDEV","_jsxDEV","NotificationContext","undefined","useNotification","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","removeNotification","id","prev","filter","notification","showNotification","Date","now","toString","newNotification","duration","setTimeout","showSuccess","title","message","type","showError","showWarning","showInfo","getIcon","Provider","value","className","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","e","stopPropagation","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Ia marketing/Painel-integrado/ai-marketing-automation/src/components/NotificationSystem.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport './NotificationSystem.css';\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title: string;\r\n  message: string;\r\n  duration?: number;\r\n}\r\n\r\ninterface NotificationContextType {\r\n  showNotification: (notification: Omit<Notification, 'id'>) => void;\r\n  showSuccess: (title: string, message: string) => void;\r\n  showError: (title: string, message: string) => void;\r\n  showWarning: (title: string, message: string) => void;\r\n  showInfo: (title: string, message: string) => void;\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification deve ser usado dentro de NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface NotificationProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n\r\n  const removeNotification = useCallback((id: string) => {\r\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n  }, []);\r\n\r\n  const showNotification = useCallback((notification: Omit<Notification, 'id'>) => {\r\n    const id = Date.now().toString();\r\n    const newNotification: Notification = {\r\n      ...notification,\r\n      id,\r\n      duration: notification.duration || 5000\r\n    };\r\n\r\n    setNotifications(prev => [...prev, newNotification]);\r\n\r\n    // Auto remove notification\r\n    setTimeout(() => {\r\n      removeNotification(id);\r\n    }, newNotification.duration);\r\n  }, [removeNotification]);\r\n\r\n  const showSuccess = useCallback((title: string, message: string) => {\r\n    showNotification({ type: 'success', title, message });\r\n  }, [showNotification]);\r\n\r\n  const showError = useCallback((title: string, message: string) => {\r\n    showNotification({ type: 'error', title, message, duration: 7000 });\r\n  }, [showNotification]);\r\n\r\n  const showWarning = useCallback((title: string, message: string) => {\r\n    showNotification({ type: 'warning', title, message });\r\n  }, [showNotification]);\r\n\r\n  const showInfo = useCallback((title: string, message: string) => {\r\n    showNotification({ type: 'info', title, message });\r\n  }, [showNotification]);\r\n\r\n  const getIcon = (type: Notification['type']) => {\r\n    switch (type) {\r\n      case 'success': return '✅';\r\n      case 'error': return '❌';\r\n      case 'warning': return '⚠️';\r\n      case 'info': return 'ℹ️';\r\n      default: return 'ℹ️';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{\r\n      showNotification,\r\n      showSuccess,\r\n      showError,\r\n      showWarning,\r\n      showInfo\r\n    }}>\r\n      {children}\r\n      \r\n      <div className=\"notification-container\">\r\n        {notifications.map((notification) => (\r\n          <div\r\n            key={notification.id}\r\n            className={`notification notification-${notification.type}`}\r\n            onClick={() => removeNotification(notification.id)}\r\n          >\r\n            <div className=\"notification-icon\">\r\n              {getIcon(notification.type)}\r\n            </div>\r\n            <div className=\"notification-content\">\r\n              <div className=\"notification-title\">{notification.title}</div>\r\n              <div className=\"notification-message\">{notification.message}</div>\r\n            </div>\r\n            <button\r\n              className=\"notification-close\"\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                removeNotification(notification.id);\r\n              }}\r\n            >\r\n              ×\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NotificationProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}