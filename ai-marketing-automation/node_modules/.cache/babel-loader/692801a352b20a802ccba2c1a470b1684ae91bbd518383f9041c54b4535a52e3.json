{"ast":null,"code":"// Configuração base da API\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = void 0;\n    this.baseURL = API_BASE_URL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // Adicionar token de autenticação\n    const token = localStorage.getItem('painelIntegradoToken');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers\n      });\n\n      // Verificar se o token expirou\n      if (response.status === 401) {\n        localStorage.removeItem('painelIntegradoToken');\n        localStorage.removeItem('painelIntegradoUser');\n        window.location.reload();\n        throw new Error('Token expirado');\n      }\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Métodos de autenticação\n  async login(email, password) {\n    return await this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n  }\n  async register(name, email, password) {\n    return await this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n  }\n  async verifyToken() {\n    return await this.request('/auth/verify');\n  }\n  async logout() {\n    return await this.request('/auth/logout', {\n      method: 'POST'\n    });\n  }\n\n  // Métodos de campanhas\n  async getCampaigns() {\n    return await this.request('/campaigns');\n  }\n  async getCampaign(id) {\n    return await this.request(`/campaigns/${id}`);\n  }\n  async createCampaign(campaignData) {\n    return await this.request('/campaigns', {\n      method: 'POST',\n      body: JSON.stringify(campaignData)\n    });\n  }\n  async updateCampaign(id, campaignData) {\n    return await this.request(`/campaigns/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(campaignData)\n    });\n  }\n  async updateCampaignStatus(id, status) {\n    return await this.request(`/campaigns/${id}/status`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        status\n      })\n    });\n  }\n  async deleteCampaign(id) {\n    return await this.request(`/campaigns/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async getCampaignMetrics(id, period = '7d') {\n    return await this.request(`/campaigns/${id}/metrics?period=${period}`);\n  }\n\n  // Métodos de analytics\n  async getDashboardAnalytics(period = '30d') {\n    return await this.request(`/analytics/dashboard?period=${period}`);\n  }\n  async getPlatformAnalytics(platform, period = '30d') {\n    return await this.request(`/analytics/platform/${platform}?period=${period}`);\n  }\n  async getConversionsReport(period = '30d') {\n    return await this.request(`/analytics/conversions?period=${period}`);\n  }\n  async getAiAgentsAnalytics(period = '30d') {\n    return await this.request(`/analytics/ai-agents?period=${period}`);\n  }\n  async generateCustomReport(reportData) {\n    return await this.request('/analytics/report', {\n      method: 'POST',\n      body: JSON.stringify(reportData)\n    });\n  }\n\n  // Métodos de agentes de IA\n  async getAiAgents() {\n    return await this.request('/ai-agent');\n  }\n  async getAgentCapabilities(agentName) {\n    return await this.request(`/ai-agent/${agentName}/capabilities`);\n  }\n  async sendMessageToAgent(agentName, message, context, conversationHistory) {\n    return await this.request(`/ai-agent/${agentName}/message`, {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        context,\n        conversationHistory\n      })\n    });\n  }\n  async selectBestAgent(message, context) {\n    return await this.request('/ai-agent/select', {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        context\n      })\n    });\n  }\n  async chatWithAi(message, context, conversationHistory) {\n    return await this.request('/ai-agent/chat', {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        context,\n        conversationHistory\n      })\n    });\n  }\n  async testAiAgents(messages) {\n    return await this.request('/ai-agent/test', {\n      method: 'POST',\n      body: JSON.stringify({\n        messages\n      })\n    });\n  }\n  async getAiAgentsStats() {\n    return await this.request('/ai-agent/stats');\n  }\n\n  // Métodos de webhook\n  async testWebhook(platform, message, recipient) {\n    return await this.request('/webhook/test', {\n      method: 'POST',\n      body: JSON.stringify({\n        platform,\n        message,\n        recipient\n      })\n    });\n  }\n  async getWebhookStatus() {\n    return await this.request('/webhook/status');\n  }\n\n  // Método para verificar saúde da API\n  async healthCheck() {\n    return await this.request('/health');\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","ApiService","constructor","baseURL","request","endpoint","options","url","token","localStorage","getItem","headers","Authorization","response","fetch","status","removeItem","window","location","reload","Error","ok","json","error","console","login","email","password","method","body","JSON","stringify","register","name","verifyToken","logout","getCampaigns","getCampaign","id","createCampaign","campaignData","updateCampaign","updateCampaignStatus","deleteCampaign","getCampaignMetrics","period","getDashboardAnalytics","getPlatformAnalytics","platform","getConversionsReport","getAiAgentsAnalytics","generateCustomReport","reportData","getAiAgents","getAgentCapabilities","agentName","sendMessageToAgent","message","context","conversationHistory","selectBestAgent","chatWithAi","testAiAgents","messages","getAiAgentsStats","testWebhook","recipient","getWebhookStatus","healthCheck","apiService"],"sources":["C:/Users/User/Desktop/Ia marketing/Painel-integrado/ai-marketing-automation/src/services/api.ts"],"sourcesContent":["// Configuração base da API\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';\r\n\r\nclass ApiService {\r\n  private baseURL: string;\r\n\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  private async request(endpoint: string, options: RequestInit = {}): Promise<any> {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    // Adicionar token de autenticação\r\n    const token = localStorage.getItem('painelIntegradoToken');\r\n    const headers: HeadersInit = {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    };\r\n    \r\n    if (token) {\r\n      (headers as any).Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        ...options,\r\n        headers,\r\n      });\r\n\r\n      // Verificar se o token expirou\r\n      if (response.status === 401) {\r\n        localStorage.removeItem('painelIntegradoToken');\r\n        localStorage.removeItem('painelIntegradoUser');\r\n        window.location.reload();\r\n        throw new Error('Token expirado');\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Métodos de autenticação\r\n  async login(email: string, password: string) {\r\n    return await this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n  }\r\n\r\n  async register(name: string, email: string, password: string) {\r\n    return await this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ name, email, password }),\r\n    });\r\n  }\r\n\r\n  async verifyToken() {\r\n    return await this.request('/auth/verify');\r\n  }\r\n\r\n  async logout() {\r\n    return await this.request('/auth/logout', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  // Métodos de campanhas\r\n  async getCampaigns() {\r\n    return await this.request('/campaigns');\r\n  }\r\n\r\n  async getCampaign(id: string) {\r\n    return await this.request(`/campaigns/${id}`);\r\n  }\r\n\r\n  async createCampaign(campaignData: any) {\r\n    return await this.request('/campaigns', {\r\n      method: 'POST',\r\n      body: JSON.stringify(campaignData),\r\n    });\r\n  }\r\n\r\n  async updateCampaign(id: string, campaignData: any) {\r\n    return await this.request(`/campaigns/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(campaignData),\r\n    });\r\n  }\r\n\r\n  async updateCampaignStatus(id: string, status: string) {\r\n    return await this.request(`/campaigns/${id}/status`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify({ status }),\r\n    });\r\n  }\r\n\r\n  async deleteCampaign(id: string) {\r\n    return await this.request(`/campaigns/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  async getCampaignMetrics(id: string, period: string = '7d') {\r\n    return await this.request(`/campaigns/${id}/metrics?period=${period}`);\r\n  }\r\n\r\n  // Métodos de analytics\r\n  async getDashboardAnalytics(period: string = '30d') {\r\n    return await this.request(`/analytics/dashboard?period=${period}`);\r\n  }\r\n\r\n  async getPlatformAnalytics(platform: string, period: string = '30d') {\r\n    return await this.request(`/analytics/platform/${platform}?period=${period}`);\r\n  }\r\n\r\n  async getConversionsReport(period: string = '30d') {\r\n    return await this.request(`/analytics/conversions?period=${period}`);\r\n  }\r\n\r\n  async getAiAgentsAnalytics(period: string = '30d') {\r\n    return await this.request(`/analytics/ai-agents?period=${period}`);\r\n  }\r\n\r\n  async generateCustomReport(reportData: any) {\r\n    return await this.request('/analytics/report', {\r\n      method: 'POST',\r\n      body: JSON.stringify(reportData),\r\n    });\r\n  }\r\n\r\n  // Métodos de agentes de IA\r\n  async getAiAgents() {\r\n    return await this.request('/ai-agent');\r\n  }\r\n\r\n  async getAgentCapabilities(agentName: string) {\r\n    return await this.request(`/ai-agent/${agentName}/capabilities`);\r\n  }\r\n\r\n  async sendMessageToAgent(agentName: string, message: string, context?: any, conversationHistory?: any[]) {\r\n    return await this.request(`/ai-agent/${agentName}/message`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        message,\r\n        context,\r\n        conversationHistory\r\n      }),\r\n    });\r\n  }\r\n\r\n  async selectBestAgent(message: string, context?: any) {\r\n    return await this.request('/ai-agent/select', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ message, context }),\r\n    });\r\n  }\r\n\r\n  async chatWithAi(message: string, context?: any, conversationHistory?: any[]) {\r\n    return await this.request('/ai-agent/chat', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        message,\r\n        context,\r\n        conversationHistory\r\n      }),\r\n    });\r\n  }\r\n\r\n  async testAiAgents(messages: string[]) {\r\n    return await this.request('/ai-agent/test', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ messages }),\r\n    });\r\n  }\r\n\r\n  async getAiAgentsStats() {\r\n    return await this.request('/ai-agent/stats');\r\n  }\r\n\r\n  // Métodos de webhook\r\n  async testWebhook(platform: string, message: string, recipient?: string) {\r\n    return await this.request('/webhook/test', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        platform,\r\n        message,\r\n        recipient\r\n      }),\r\n    });\r\n  }\r\n\r\n  async getWebhookStatus() {\r\n    return await this.request('/webhook/status');\r\n  }\r\n\r\n  // Método para verificar saúde da API\r\n  async healthCheck() {\r\n    return await this.request('/health');\r\n  }\r\n}\r\n\r\nexport const apiService = new ApiService();\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}